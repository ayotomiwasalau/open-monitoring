name: Deploy Monitoring Stack

on:
  push:
    branches: [ main, master ]
    paths: [ 'open-monitoring/**' ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - uninstall

env:
  NAMESPACE: monitoring
  RELEASE_NAME: prometheus

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'uninstall' || github.event_name == 'push'
    env:
      KUBECONFIG: kubeconfig
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig

        
    - name: Validate cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: Add Helm repositories
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add stable https://charts.helm.sh/stable
        helm repo update
        
    - name: Create namespace
      run: |
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Deploy/Upgrade Prometheus Stack
      run: |
        cd prometheus_grafana
        cp ../kubeconfig .
        
        # Check if release exists
        if helm list -n $NAMESPACE | grep -q $RELEASE_NAME; then
          echo "Upgrading existing release..."
          helm upgrade $RELEASE_NAME prometheus-community/kube-prometheus-stack \
            --namespace $NAMESPACE \
            # -f prom-grafana-values.yml \
            --version 45.7.1 \
            --wait \
            --timeout 10m
        else
          echo "Installing new release..."
          helm install $RELEASE_NAME prometheus-community/kube-prometheus-stack \
            --namespace $NAMESPACE \
            # -f prom-grafana-values.yml \
            --version 45.7.1 \
            --wait \
            --timeout 10m
        fi

    
        
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus-grafana -n $NAMESPACE
        kubectl wait --for=condition=available --timeout=300s deployment/prometheus-kube-prometheus-operator -n $NAMESPACE
        
    - name: Verify deployment
      run: |
        echo "=== Pod Status ==="
        kubectl get pods -n $NAMESPACE
        echo "=== Service Status ==="
        kubectl get svc -n $NAMESPACE
        echo "=== Helm Release Status ==="
        helm list -n $NAMESPACE
        
    - name: Deploy custom dashboards
      run: |
        if [ -f "open-monitoring/prometheus_grafana/TM-dashboard-1722796886345.json" ]; then
          echo "Deploying custom dashboard..."
          kubectl create configmap grafana-dashboard --from-file=open-monitoring/prometheus_grafana/TM-dashboard-1722796886345.json -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        fi
        
    - name: Get access information
      run: |
        echo "=== Access Information ==="
        echo "Grafana URL: http://$(kubectl get svc prometheus-grafana -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):80"
        echo "Prometheus URL: http://$(kubectl get svc prometheus-kube-prometheus-prometheus -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):9090"
        echo "Default Grafana credentials: admin / ${{ secrets.GRAFANA_ADMIN_PASSWORD }}"

  uninstall-monitoring:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'uninstall'
    env:
      KUBECONFIG: kubeconfig
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        
    - name: Validate cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: Check if release exists
      run: |
        if helm list -n $NAMESPACE | grep -q $RELEASE_NAME; then
          echo "Release $RELEASE_NAME found in namespace $NAMESPACE"
        else
          echo "Release $RELEASE_NAME not found in namespace $NAMESPACE"
          exit 1
        fi
        
    - name: Uninstall Prometheus Stack
      run: |
        echo "Uninstalling Prometheus stack..."
        helm uninstall $RELEASE_NAME -n $NAMESPACE --wait --timeout 10m
        
    - name: Clean up custom resources
      run: |
        echo "Cleaning up custom resources..."
        # Remove custom dashboards
        kubectl delete configmap grafana-dashboard -n $NAMESPACE --ignore-not-found=true
        
        # Remove any remaining PVCs (optional - uncomment if you want to delete data)
        # kubectl delete pvc -l app.kubernetes.io/instance=$RELEASE_NAME -n $NAMESPACE --ignore-not-found=true
        
    - name: Verify uninstallation
      run: |
        echo "=== Verification ==="
        echo "Checking if release is uninstalled..."
        if helm list -n $NAMESPACE | grep -q $RELEASE_NAME; then
          echo "ERROR: Release $RELEASE_NAME still exists!"
          exit 1
        else
          echo "SUCCESS: Release $RELEASE_NAME has been uninstalled"
        fi
        
        echo "=== Remaining resources in namespace ==="
        kubectl get all -n $NAMESPACE
        
    - name: Clean up namespace (optional)
      run: |
        echo "Removing namespace $NAMESPACE..."
        kubectl delete namespace $NAMESPACE --ignore-not-found=true
        echo "Namespace $NAMESPACE has been removed"